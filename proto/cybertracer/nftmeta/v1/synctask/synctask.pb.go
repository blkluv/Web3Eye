// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: cybertracer/nftmeta/v1/synctask/synctask.proto

package synctask

import (
	cybertracer "github.com/web3eye-io/cyber-tracer/proto/cybertracer"
	cttype "github.com/web3eye-io/cyber-tracer/proto/cybertracer/nftmeta/v1/cttype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *string           `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	ChainType   *cttype.ChainType `protobuf:"varint,20,opt,name=ChainType,proto3,enum=cttype.ChainType,oneof" json:"ChainType,omitempty"`
	ChainID     *int32            `protobuf:"varint,30,opt,name=ChainID,proto3,oneof" json:"ChainID,omitempty"`
	Start       *uint64           `protobuf:"varint,40,opt,name=Start,proto3,oneof" json:"Start,omitempty"`
	End         *uint64           `protobuf:"varint,50,opt,name=End,proto3,oneof" json:"End,omitempty"`
	Current     *uint64           `protobuf:"varint,60,opt,name=Current,proto3,oneof" json:"Current,omitempty"`
	Topic       *string           `protobuf:"bytes,70,opt,name=Topic,proto3,oneof" json:"Topic,omitempty"`
	Description *string           `protobuf:"bytes,80,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	SyncState   *cttype.SyncState `protobuf:"varint,90,opt,name=SyncState,proto3,enum=cttype.SyncState,oneof" json:"SyncState,omitempty"`
	Remark      *string           `protobuf:"bytes,100,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *SyncTaskReq) Reset() {
	*x = SyncTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTaskReq) ProtoMessage() {}

func (x *SyncTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTaskReq.ProtoReflect.Descriptor instead.
func (*SyncTaskReq) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{0}
}

func (x *SyncTaskReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *SyncTaskReq) GetChainType() cttype.ChainType {
	if x != nil && x.ChainType != nil {
		return *x.ChainType
	}
	return cttype.ChainType(0)
}

func (x *SyncTaskReq) GetChainID() int32 {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return 0
}

func (x *SyncTaskReq) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *SyncTaskReq) GetEnd() uint64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *SyncTaskReq) GetCurrent() uint64 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

func (x *SyncTaskReq) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *SyncTaskReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SyncTaskReq) GetSyncState() cttype.SyncState {
	if x != nil && x.SyncState != nil {
		return *x.SyncState
	}
	return cttype.SyncState(0)
}

func (x *SyncTaskReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type SyncTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string           `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	ChainType   cttype.ChainType `protobuf:"varint,20,opt,name=ChainType,proto3,enum=cttype.ChainType" json:"ChainType,omitempty"`
	ChainID     int32            `protobuf:"varint,30,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Start       uint64           `protobuf:"varint,40,opt,name=Start,proto3" json:"Start,omitempty"`
	End         uint64           `protobuf:"varint,50,opt,name=End,proto3" json:"End,omitempty"`
	Current     uint64           `protobuf:"varint,60,opt,name=Current,proto3" json:"Current,omitempty"`
	Topic       string           `protobuf:"bytes,70,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Description string           `protobuf:"bytes,80,opt,name=Description,proto3" json:"Description,omitempty"`
	SyncState   cttype.SyncState `protobuf:"varint,90,opt,name=SyncState,proto3,enum=cttype.SyncState" json:"SyncState,omitempty"`
	Remark      string           `protobuf:"bytes,100,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (x *SyncTask) Reset() {
	*x = SyncTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTask) ProtoMessage() {}

func (x *SyncTask) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTask.ProtoReflect.Descriptor instead.
func (*SyncTask) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{1}
}

func (x *SyncTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SyncTask) GetChainType() cttype.ChainType {
	if x != nil {
		return x.ChainType
	}
	return cttype.ChainType(0)
}

func (x *SyncTask) GetChainID() int32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *SyncTask) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SyncTask) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SyncTask) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *SyncTask) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SyncTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SyncTask) GetSyncState() cttype.SyncState {
	if x != nil {
		return x.SyncState
	}
	return cttype.SyncState(0)
}

func (x *SyncTask) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *cybertracer.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	ChainType   *cybertracer.StringVal      `protobuf:"bytes,20,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	ChainID     *cybertracer.Int32Val       `protobuf:"bytes,30,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Start       *cybertracer.Uint64Val      `protobuf:"bytes,40,opt,name=Start,proto3" json:"Start,omitempty"`
	End         *cybertracer.Uint64Val      `protobuf:"bytes,50,opt,name=End,proto3" json:"End,omitempty"`
	Current     *cybertracer.Uint64Val      `protobuf:"bytes,60,opt,name=Current,proto3" json:"Current,omitempty"`
	Topic       *cybertracer.StringVal      `protobuf:"bytes,70,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Description *cybertracer.StringVal      `protobuf:"bytes,80,opt,name=Description,proto3" json:"Description,omitempty"`
	SyncState   *cybertracer.StringVal      `protobuf:"bytes,90,opt,name=SyncState,proto3" json:"SyncState,omitempty"`
	Remark      *cybertracer.StringVal      `protobuf:"bytes,100,opt,name=Remark,proto3" json:"Remark,omitempty"`
	IDs         *cybertracer.StringSliceVal `protobuf:"bytes,110,opt,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *cybertracer.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetChainType() *cybertracer.StringVal {
	if x != nil {
		return x.ChainType
	}
	return nil
}

func (x *Conds) GetChainID() *cybertracer.Int32Val {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Conds) GetStart() *cybertracer.Uint64Val {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Conds) GetEnd() *cybertracer.Uint64Val {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Conds) GetCurrent() *cybertracer.Uint64Val {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *Conds) GetTopic() *cybertracer.StringVal {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Conds) GetDescription() *cybertracer.StringVal {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Conds) GetSyncState() *cybertracer.StringVal {
	if x != nil {
		return x.SyncState
	}
	return nil
}

func (x *Conds) GetRemark() *cybertracer.StringVal {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *Conds) GetIDs() *cybertracer.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

type CreateSyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTaskReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateSyncTaskRequest) Reset() {
	*x = CreateSyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncTaskRequest) ProtoMessage() {}

func (x *CreateSyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateSyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSyncTaskRequest) GetInfo() *SyncTaskReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateSyncTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTask `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateSyncTaskResponse) Reset() {
	*x = CreateSyncTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSyncTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncTaskResponse) ProtoMessage() {}

func (x *CreateSyncTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateSyncTaskResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSyncTaskResponse) GetInfo() *SyncTask {
	if x != nil {
		return x.Info
	}
	return nil
}

type TriggerSyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,10,opt,name=Topic,proto3" json:"Topic,omitempty"`
}

func (x *TriggerSyncTaskRequest) Reset() {
	*x = TriggerSyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSyncTaskRequest) ProtoMessage() {}

func (x *TriggerSyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSyncTaskRequest.ProtoReflect.Descriptor instead.
func (*TriggerSyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{5}
}

func (x *TriggerSyncTaskRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type GetSyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetSyncTaskRequest) Reset() {
	*x = GetSyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncTaskRequest) ProtoMessage() {}

func (x *GetSyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncTaskRequest.ProtoReflect.Descriptor instead.
func (*GetSyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{6}
}

func (x *GetSyncTaskRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetSyncTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTask `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetSyncTaskResponse) Reset() {
	*x = GetSyncTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncTaskResponse) ProtoMessage() {}

func (x *GetSyncTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncTaskResponse.ProtoReflect.Descriptor instead.
func (*GetSyncTaskResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{7}
}

func (x *GetSyncTaskResponse) GetInfo() *SyncTask {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetSyncTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetSyncTasksRequest) Reset() {
	*x = GetSyncTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncTasksRequest) ProtoMessage() {}

func (x *GetSyncTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncTasksRequest.ProtoReflect.Descriptor instead.
func (*GetSyncTasksRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{8}
}

func (x *GetSyncTasksRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetSyncTasksRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSyncTasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSyncTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SyncTask `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetSyncTasksResponse) Reset() {
	*x = GetSyncTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncTasksResponse) ProtoMessage() {}

func (x *GetSyncTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncTasksResponse.ProtoReflect.Descriptor instead.
func (*GetSyncTasksResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{9}
}

func (x *GetSyncTasksResponse) GetInfos() []*SyncTask {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetSyncTasksResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetSyncTaskOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetSyncTaskOnlyRequest) Reset() {
	*x = GetSyncTaskOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncTaskOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncTaskOnlyRequest) ProtoMessage() {}

func (x *GetSyncTaskOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncTaskOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetSyncTaskOnlyRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{10}
}

func (x *GetSyncTaskOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetSyncTaskOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTask `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetSyncTaskOnlyResponse) Reset() {
	*x = GetSyncTaskOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncTaskOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncTaskOnlyResponse) ProtoMessage() {}

func (x *GetSyncTaskOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncTaskOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetSyncTaskOnlyResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{11}
}

func (x *GetSyncTaskOnlyResponse) GetInfo() *SyncTask {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateSyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTaskReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateSyncTaskRequest) Reset() {
	*x = UpdateSyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncTaskRequest) ProtoMessage() {}

func (x *UpdateSyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSyncTaskRequest) GetInfo() *SyncTaskReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateSyncTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTask `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateSyncTaskResponse) Reset() {
	*x = UpdateSyncTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSyncTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncTaskResponse) ProtoMessage() {}

func (x *UpdateSyncTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncTaskResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSyncTaskResponse) GetInfo() *SyncTask {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistSyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistSyncTaskRequest) Reset() {
	*x = ExistSyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSyncTaskRequest) ProtoMessage() {}

func (x *ExistSyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSyncTaskRequest.ProtoReflect.Descriptor instead.
func (*ExistSyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{14}
}

func (x *ExistSyncTaskRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistSyncTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistSyncTaskResponse) Reset() {
	*x = ExistSyncTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSyncTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSyncTaskResponse) ProtoMessage() {}

func (x *ExistSyncTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSyncTaskResponse.ProtoReflect.Descriptor instead.
func (*ExistSyncTaskResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{15}
}

func (x *ExistSyncTaskResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistSyncTaskCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistSyncTaskCondsRequest) Reset() {
	*x = ExistSyncTaskCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSyncTaskCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSyncTaskCondsRequest) ProtoMessage() {}

func (x *ExistSyncTaskCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSyncTaskCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistSyncTaskCondsRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{16}
}

func (x *ExistSyncTaskCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistSyncTaskCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistSyncTaskCondsResponse) Reset() {
	*x = ExistSyncTaskCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSyncTaskCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSyncTaskCondsResponse) ProtoMessage() {}

func (x *ExistSyncTaskCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSyncTaskCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistSyncTaskCondsResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{17}
}

func (x *ExistSyncTaskCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountSyncTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountSyncTasksRequest) Reset() {
	*x = CountSyncTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSyncTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSyncTasksRequest) ProtoMessage() {}

func (x *CountSyncTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSyncTasksRequest.ProtoReflect.Descriptor instead.
func (*CountSyncTasksRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{18}
}

func (x *CountSyncTasksRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountSyncTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountSyncTasksResponse) Reset() {
	*x = CountSyncTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSyncTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSyncTasksResponse) ProtoMessage() {}

func (x *CountSyncTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSyncTasksResponse.ProtoReflect.Descriptor instead.
func (*CountSyncTasksResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{19}
}

func (x *CountSyncTasksResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteSyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteSyncTaskRequest) Reset() {
	*x = DeleteSyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncTaskRequest) ProtoMessage() {}

func (x *DeleteSyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteSyncTaskRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteSyncTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SyncTask `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteSyncTaskResponse) Reset() {
	*x = DeleteSyncTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyncTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncTaskResponse) ProtoMessage() {}

func (x *DeleteSyncTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteSyncTaskResponse) Descriptor() ([]byte, []int) {
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSyncTaskResponse) GetInfo() *SyncTask {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_cybertracer_nftmeta_v1_synctask_synctask_proto protoreflect.FileDescriptor

var file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2f, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1d, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x2f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcf, 0x03, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x04, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x08, 0x52, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x45, 0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xa8, 0x02, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x45,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9d, 0x04,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79,
	0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x52, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2d,
	0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79,
	0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x4d, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x2b, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d,
	0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a,
	0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x49, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x4b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xc7,
	0x08, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x27, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e,
	0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2d, 0x69,
	0x6f, 0x2f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63,
	0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescOnce sync.Once
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescData = file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDesc
)

func file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescGZIP() []byte {
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescOnce.Do(func() {
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescData = protoimpl.X.CompressGZIP(file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescData)
	})
	return file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDescData
}

var file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_cybertracer_nftmeta_v1_synctask_synctask_proto_goTypes = []interface{}{
	(*SyncTaskReq)(nil),                // 0: nftmeta.v1.synctask.SyncTaskReq
	(*SyncTask)(nil),                   // 1: nftmeta.v1.synctask.SyncTask
	(*Conds)(nil),                      // 2: nftmeta.v1.synctask.Conds
	(*CreateSyncTaskRequest)(nil),      // 3: nftmeta.v1.synctask.CreateSyncTaskRequest
	(*CreateSyncTaskResponse)(nil),     // 4: nftmeta.v1.synctask.CreateSyncTaskResponse
	(*TriggerSyncTaskRequest)(nil),     // 5: nftmeta.v1.synctask.TriggerSyncTaskRequest
	(*GetSyncTaskRequest)(nil),         // 6: nftmeta.v1.synctask.GetSyncTaskRequest
	(*GetSyncTaskResponse)(nil),        // 7: nftmeta.v1.synctask.GetSyncTaskResponse
	(*GetSyncTasksRequest)(nil),        // 8: nftmeta.v1.synctask.GetSyncTasksRequest
	(*GetSyncTasksResponse)(nil),       // 9: nftmeta.v1.synctask.GetSyncTasksResponse
	(*GetSyncTaskOnlyRequest)(nil),     // 10: nftmeta.v1.synctask.GetSyncTaskOnlyRequest
	(*GetSyncTaskOnlyResponse)(nil),    // 11: nftmeta.v1.synctask.GetSyncTaskOnlyResponse
	(*UpdateSyncTaskRequest)(nil),      // 12: nftmeta.v1.synctask.UpdateSyncTaskRequest
	(*UpdateSyncTaskResponse)(nil),     // 13: nftmeta.v1.synctask.UpdateSyncTaskResponse
	(*ExistSyncTaskRequest)(nil),       // 14: nftmeta.v1.synctask.ExistSyncTaskRequest
	(*ExistSyncTaskResponse)(nil),      // 15: nftmeta.v1.synctask.ExistSyncTaskResponse
	(*ExistSyncTaskCondsRequest)(nil),  // 16: nftmeta.v1.synctask.ExistSyncTaskCondsRequest
	(*ExistSyncTaskCondsResponse)(nil), // 17: nftmeta.v1.synctask.ExistSyncTaskCondsResponse
	(*CountSyncTasksRequest)(nil),      // 18: nftmeta.v1.synctask.CountSyncTasksRequest
	(*CountSyncTasksResponse)(nil),     // 19: nftmeta.v1.synctask.CountSyncTasksResponse
	(*DeleteSyncTaskRequest)(nil),      // 20: nftmeta.v1.synctask.DeleteSyncTaskRequest
	(*DeleteSyncTaskResponse)(nil),     // 21: nftmeta.v1.synctask.DeleteSyncTaskResponse
	(cttype.ChainType)(0),              // 22: cttype.ChainType
	(cttype.SyncState)(0),              // 23: cttype.SyncState
	(*cybertracer.StringVal)(nil),      // 24: cybertracer.StringVal
	(*cybertracer.Int32Val)(nil),       // 25: cybertracer.Int32Val
	(*cybertracer.Uint64Val)(nil),      // 26: cybertracer.Uint64Val
	(*cybertracer.StringSliceVal)(nil), // 27: cybertracer.StringSliceVal
}
var file_cybertracer_nftmeta_v1_synctask_synctask_proto_depIdxs = []int32{
	22, // 0: nftmeta.v1.synctask.SyncTaskReq.ChainType:type_name -> cttype.ChainType
	23, // 1: nftmeta.v1.synctask.SyncTaskReq.SyncState:type_name -> cttype.SyncState
	22, // 2: nftmeta.v1.synctask.SyncTask.ChainType:type_name -> cttype.ChainType
	23, // 3: nftmeta.v1.synctask.SyncTask.SyncState:type_name -> cttype.SyncState
	24, // 4: nftmeta.v1.synctask.Conds.ID:type_name -> cybertracer.StringVal
	24, // 5: nftmeta.v1.synctask.Conds.ChainType:type_name -> cybertracer.StringVal
	25, // 6: nftmeta.v1.synctask.Conds.ChainID:type_name -> cybertracer.Int32Val
	26, // 7: nftmeta.v1.synctask.Conds.Start:type_name -> cybertracer.Uint64Val
	26, // 8: nftmeta.v1.synctask.Conds.End:type_name -> cybertracer.Uint64Val
	26, // 9: nftmeta.v1.synctask.Conds.Current:type_name -> cybertracer.Uint64Val
	24, // 10: nftmeta.v1.synctask.Conds.Topic:type_name -> cybertracer.StringVal
	24, // 11: nftmeta.v1.synctask.Conds.Description:type_name -> cybertracer.StringVal
	24, // 12: nftmeta.v1.synctask.Conds.SyncState:type_name -> cybertracer.StringVal
	24, // 13: nftmeta.v1.synctask.Conds.Remark:type_name -> cybertracer.StringVal
	27, // 14: nftmeta.v1.synctask.Conds.IDs:type_name -> cybertracer.StringSliceVal
	0,  // 15: nftmeta.v1.synctask.CreateSyncTaskRequest.Info:type_name -> nftmeta.v1.synctask.SyncTaskReq
	1,  // 16: nftmeta.v1.synctask.CreateSyncTaskResponse.Info:type_name -> nftmeta.v1.synctask.SyncTask
	1,  // 17: nftmeta.v1.synctask.GetSyncTaskResponse.Info:type_name -> nftmeta.v1.synctask.SyncTask
	2,  // 18: nftmeta.v1.synctask.GetSyncTasksRequest.Conds:type_name -> nftmeta.v1.synctask.Conds
	1,  // 19: nftmeta.v1.synctask.GetSyncTasksResponse.Infos:type_name -> nftmeta.v1.synctask.SyncTask
	2,  // 20: nftmeta.v1.synctask.GetSyncTaskOnlyRequest.Conds:type_name -> nftmeta.v1.synctask.Conds
	1,  // 21: nftmeta.v1.synctask.GetSyncTaskOnlyResponse.Info:type_name -> nftmeta.v1.synctask.SyncTask
	0,  // 22: nftmeta.v1.synctask.UpdateSyncTaskRequest.Info:type_name -> nftmeta.v1.synctask.SyncTaskReq
	1,  // 23: nftmeta.v1.synctask.UpdateSyncTaskResponse.Info:type_name -> nftmeta.v1.synctask.SyncTask
	2,  // 24: nftmeta.v1.synctask.ExistSyncTaskCondsRequest.Conds:type_name -> nftmeta.v1.synctask.Conds
	2,  // 25: nftmeta.v1.synctask.CountSyncTasksRequest.Conds:type_name -> nftmeta.v1.synctask.Conds
	1,  // 26: nftmeta.v1.synctask.DeleteSyncTaskResponse.Info:type_name -> nftmeta.v1.synctask.SyncTask
	3,  // 27: nftmeta.v1.synctask.Manager.CreateSyncTask:input_type -> nftmeta.v1.synctask.CreateSyncTaskRequest
	5,  // 28: nftmeta.v1.synctask.Manager.TriggerSyncTask:input_type -> nftmeta.v1.synctask.TriggerSyncTaskRequest
	12, // 29: nftmeta.v1.synctask.Manager.UpdateSyncTask:input_type -> nftmeta.v1.synctask.UpdateSyncTaskRequest
	6,  // 30: nftmeta.v1.synctask.Manager.GetSyncTask:input_type -> nftmeta.v1.synctask.GetSyncTaskRequest
	10, // 31: nftmeta.v1.synctask.Manager.GetSyncTaskOnly:input_type -> nftmeta.v1.synctask.GetSyncTaskOnlyRequest
	8,  // 32: nftmeta.v1.synctask.Manager.GetSyncTasks:input_type -> nftmeta.v1.synctask.GetSyncTasksRequest
	14, // 33: nftmeta.v1.synctask.Manager.ExistSyncTask:input_type -> nftmeta.v1.synctask.ExistSyncTaskRequest
	16, // 34: nftmeta.v1.synctask.Manager.ExistSyncTaskConds:input_type -> nftmeta.v1.synctask.ExistSyncTaskCondsRequest
	18, // 35: nftmeta.v1.synctask.Manager.CountSyncTasks:input_type -> nftmeta.v1.synctask.CountSyncTasksRequest
	20, // 36: nftmeta.v1.synctask.Manager.DeleteSyncTask:input_type -> nftmeta.v1.synctask.DeleteSyncTaskRequest
	4,  // 37: nftmeta.v1.synctask.Manager.CreateSyncTask:output_type -> nftmeta.v1.synctask.CreateSyncTaskResponse
	7,  // 38: nftmeta.v1.synctask.Manager.TriggerSyncTask:output_type -> nftmeta.v1.synctask.GetSyncTaskResponse
	13, // 39: nftmeta.v1.synctask.Manager.UpdateSyncTask:output_type -> nftmeta.v1.synctask.UpdateSyncTaskResponse
	7,  // 40: nftmeta.v1.synctask.Manager.GetSyncTask:output_type -> nftmeta.v1.synctask.GetSyncTaskResponse
	11, // 41: nftmeta.v1.synctask.Manager.GetSyncTaskOnly:output_type -> nftmeta.v1.synctask.GetSyncTaskOnlyResponse
	9,  // 42: nftmeta.v1.synctask.Manager.GetSyncTasks:output_type -> nftmeta.v1.synctask.GetSyncTasksResponse
	15, // 43: nftmeta.v1.synctask.Manager.ExistSyncTask:output_type -> nftmeta.v1.synctask.ExistSyncTaskResponse
	17, // 44: nftmeta.v1.synctask.Manager.ExistSyncTaskConds:output_type -> nftmeta.v1.synctask.ExistSyncTaskCondsResponse
	19, // 45: nftmeta.v1.synctask.Manager.CountSyncTasks:output_type -> nftmeta.v1.synctask.CountSyncTasksResponse
	21, // 46: nftmeta.v1.synctask.Manager.DeleteSyncTask:output_type -> nftmeta.v1.synctask.DeleteSyncTaskResponse
	37, // [37:47] is the sub-list for method output_type
	27, // [27:37] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_cybertracer_nftmeta_v1_synctask_synctask_proto_init() }
func file_cybertracer_nftmeta_v1_synctask_synctask_proto_init() {
	if File_cybertracer_nftmeta_v1_synctask_synctask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSyncTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncTaskOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncTaskOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSyncTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSyncTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSyncTaskCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSyncTaskCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSyncTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSyncTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyncTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cybertracer_nftmeta_v1_synctask_synctask_proto_goTypes,
		DependencyIndexes: file_cybertracer_nftmeta_v1_synctask_synctask_proto_depIdxs,
		MessageInfos:      file_cybertracer_nftmeta_v1_synctask_synctask_proto_msgTypes,
	}.Build()
	File_cybertracer_nftmeta_v1_synctask_synctask_proto = out.File
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_rawDesc = nil
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_goTypes = nil
	file_cybertracer_nftmeta_v1_synctask_synctask_proto_depIdxs = nil
}
