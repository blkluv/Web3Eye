// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/web3eye-io/cyber-tracer/nft-meta/pkg/db/ent/blocknumber"
)

// BlockNumber is the model entity for the BlockNumber schema.
type BlockNumber struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// ChainType holds the value of the "chain_type" field.
	ChainType string `json:"chain_type,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID int32 `json:"chain_id,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// CurrentNum holds the value of the "current_num" field.
	CurrentNum uint64 `json:"current_num,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockNumber) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case blocknumber.FieldCreatedAt, blocknumber.FieldUpdatedAt, blocknumber.FieldDeletedAt, blocknumber.FieldChainID, blocknumber.FieldCurrentNum:
			values[i] = new(sql.NullInt64)
		case blocknumber.FieldChainType, blocknumber.FieldIdentifier, blocknumber.FieldTopic, blocknumber.FieldDescription:
			values[i] = new(sql.NullString)
		case blocknumber.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BlockNumber", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockNumber fields.
func (bn *BlockNumber) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blocknumber.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bn.ID = *value
			}
		case blocknumber.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bn.CreatedAt = uint32(value.Int64)
			}
		case blocknumber.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bn.UpdatedAt = uint32(value.Int64)
			}
		case blocknumber.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bn.DeletedAt = uint32(value.Int64)
			}
		case blocknumber.FieldChainType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_type", values[i])
			} else if value.Valid {
				bn.ChainType = value.String
			}
		case blocknumber.FieldChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				bn.ChainID = int32(value.Int64)
			}
		case blocknumber.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				bn.Identifier = value.String
			}
		case blocknumber.FieldCurrentNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_num", values[i])
			} else if value.Valid {
				bn.CurrentNum = uint64(value.Int64)
			}
		case blocknumber.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				bn.Topic = value.String
			}
		case blocknumber.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bn.Description = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BlockNumber.
// Note that you need to call BlockNumber.Unwrap() before calling this method if this BlockNumber
// was returned from a transaction, and the transaction was committed or rolled back.
func (bn *BlockNumber) Update() *BlockNumberUpdateOne {
	return (&BlockNumberClient{config: bn.config}).UpdateOne(bn)
}

// Unwrap unwraps the BlockNumber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bn *BlockNumber) Unwrap() *BlockNumber {
	_tx, ok := bn.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockNumber is not a transactional entity")
	}
	bn.config.driver = _tx.drv
	return bn
}

// String implements the fmt.Stringer.
func (bn *BlockNumber) String() string {
	var builder strings.Builder
	builder.WriteString("BlockNumber(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("chain_type=")
	builder.WriteString(bn.ChainType)
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(fmt.Sprintf("%v", bn.ChainID))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(bn.Identifier)
	builder.WriteString(", ")
	builder.WriteString("current_num=")
	builder.WriteString(fmt.Sprintf("%v", bn.CurrentNum))
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(bn.Topic)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(bn.Description)
	builder.WriteByte(')')
	return builder.String()
}

// BlockNumbers is a parsable slice of BlockNumber.
type BlockNumbers []*BlockNumber

func (bn BlockNumbers) config(cfg config) {
	for _i := range bn {
		bn[_i].config = cfg
	}
}
