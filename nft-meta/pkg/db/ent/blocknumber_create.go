// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/cyber-tracer/nft-meta/pkg/db/ent/blocknumber"
)

// BlockNumberCreate is the builder for creating a BlockNumber entity.
type BlockNumberCreate struct {
	config
	mutation *BlockNumberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bnc *BlockNumberCreate) SetCreatedAt(u uint32) *BlockNumberCreate {
	bnc.mutation.SetCreatedAt(u)
	return bnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bnc *BlockNumberCreate) SetNillableCreatedAt(u *uint32) *BlockNumberCreate {
	if u != nil {
		bnc.SetCreatedAt(*u)
	}
	return bnc
}

// SetUpdatedAt sets the "updated_at" field.
func (bnc *BlockNumberCreate) SetUpdatedAt(u uint32) *BlockNumberCreate {
	bnc.mutation.SetUpdatedAt(u)
	return bnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bnc *BlockNumberCreate) SetNillableUpdatedAt(u *uint32) *BlockNumberCreate {
	if u != nil {
		bnc.SetUpdatedAt(*u)
	}
	return bnc
}

// SetDeletedAt sets the "deleted_at" field.
func (bnc *BlockNumberCreate) SetDeletedAt(u uint32) *BlockNumberCreate {
	bnc.mutation.SetDeletedAt(u)
	return bnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bnc *BlockNumberCreate) SetNillableDeletedAt(u *uint32) *BlockNumberCreate {
	if u != nil {
		bnc.SetDeletedAt(*u)
	}
	return bnc
}

// SetChainType sets the "chain_type" field.
func (bnc *BlockNumberCreate) SetChainType(s string) *BlockNumberCreate {
	bnc.mutation.SetChainType(s)
	return bnc
}

// SetChainID sets the "chain_id" field.
func (bnc *BlockNumberCreate) SetChainID(i int32) *BlockNumberCreate {
	bnc.mutation.SetChainID(i)
	return bnc
}

// SetIdentifier sets the "identifier" field.
func (bnc *BlockNumberCreate) SetIdentifier(s string) *BlockNumberCreate {
	bnc.mutation.SetIdentifier(s)
	return bnc
}

// SetCurrentNum sets the "current_num" field.
func (bnc *BlockNumberCreate) SetCurrentNum(u uint64) *BlockNumberCreate {
	bnc.mutation.SetCurrentNum(u)
	return bnc
}

// SetTopic sets the "topic" field.
func (bnc *BlockNumberCreate) SetTopic(s string) *BlockNumberCreate {
	bnc.mutation.SetTopic(s)
	return bnc
}

// SetDescription sets the "description" field.
func (bnc *BlockNumberCreate) SetDescription(s string) *BlockNumberCreate {
	bnc.mutation.SetDescription(s)
	return bnc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bnc *BlockNumberCreate) SetNillableDescription(s *string) *BlockNumberCreate {
	if s != nil {
		bnc.SetDescription(*s)
	}
	return bnc
}

// SetID sets the "id" field.
func (bnc *BlockNumberCreate) SetID(u uuid.UUID) *BlockNumberCreate {
	bnc.mutation.SetID(u)
	return bnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bnc *BlockNumberCreate) SetNillableID(u *uuid.UUID) *BlockNumberCreate {
	if u != nil {
		bnc.SetID(*u)
	}
	return bnc
}

// Mutation returns the BlockNumberMutation object of the builder.
func (bnc *BlockNumberCreate) Mutation() *BlockNumberMutation {
	return bnc.mutation
}

// Save creates the BlockNumber in the database.
func (bnc *BlockNumberCreate) Save(ctx context.Context) (*BlockNumber, error) {
	var (
		err  error
		node *BlockNumber
	)
	if err := bnc.defaults(); err != nil {
		return nil, err
	}
	if len(bnc.hooks) == 0 {
		if err = bnc.check(); err != nil {
			return nil, err
		}
		node, err = bnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockNumberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bnc.check(); err != nil {
				return nil, err
			}
			bnc.mutation = mutation
			if node, err = bnc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bnc.hooks) - 1; i >= 0; i-- {
			if bnc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bnc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bnc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BlockNumber)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockNumberMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bnc *BlockNumberCreate) SaveX(ctx context.Context) *BlockNumber {
	v, err := bnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bnc *BlockNumberCreate) Exec(ctx context.Context) error {
	_, err := bnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnc *BlockNumberCreate) ExecX(ctx context.Context) {
	if err := bnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bnc *BlockNumberCreate) defaults() error {
	if _, ok := bnc.mutation.CreatedAt(); !ok {
		if blocknumber.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized blocknumber.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := blocknumber.DefaultCreatedAt()
		bnc.mutation.SetCreatedAt(v)
	}
	if _, ok := bnc.mutation.UpdatedAt(); !ok {
		if blocknumber.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blocknumber.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blocknumber.DefaultUpdatedAt()
		bnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bnc.mutation.DeletedAt(); !ok {
		if blocknumber.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized blocknumber.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := blocknumber.DefaultDeletedAt()
		bnc.mutation.SetDeletedAt(v)
	}
	if _, ok := bnc.mutation.ID(); !ok {
		if blocknumber.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized blocknumber.DefaultID (forgotten import ent/runtime?)")
		}
		v := blocknumber.DefaultID()
		bnc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bnc *BlockNumberCreate) check() error {
	if _, ok := bnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockNumber.created_at"`)}
	}
	if _, ok := bnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockNumber.updated_at"`)}
	}
	if _, ok := bnc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "BlockNumber.deleted_at"`)}
	}
	if _, ok := bnc.mutation.ChainType(); !ok {
		return &ValidationError{Name: "chain_type", err: errors.New(`ent: missing required field "BlockNumber.chain_type"`)}
	}
	if _, ok := bnc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "BlockNumber.chain_id"`)}
	}
	if _, ok := bnc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "BlockNumber.identifier"`)}
	}
	if _, ok := bnc.mutation.CurrentNum(); !ok {
		return &ValidationError{Name: "current_num", err: errors.New(`ent: missing required field "BlockNumber.current_num"`)}
	}
	if _, ok := bnc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "BlockNumber.topic"`)}
	}
	return nil
}

func (bnc *BlockNumberCreate) sqlSave(ctx context.Context) (*BlockNumber, error) {
	_node, _spec := bnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (bnc *BlockNumberCreate) createSpec() (*BlockNumber, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockNumber{config: bnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blocknumber.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: blocknumber.FieldID,
			},
		}
	)
	_spec.OnConflict = bnc.conflict
	if id, ok := bnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bnc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknumber.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bnc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknumber.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bnc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknumber.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := bnc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocknumber.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := bnc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: blocknumber.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := bnc.mutation.Identifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocknumber.FieldIdentifier,
		})
		_node.Identifier = value
	}
	if value, ok := bnc.mutation.CurrentNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: blocknumber.FieldCurrentNum,
		})
		_node.CurrentNum = value
	}
	if value, ok := bnc.mutation.Topic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocknumber.FieldTopic,
		})
		_node.Topic = value
	}
	if value, ok := bnc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocknumber.FieldDescription,
		})
		_node.Description = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockNumber.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockNumberUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (bnc *BlockNumberCreate) OnConflict(opts ...sql.ConflictOption) *BlockNumberUpsertOne {
	bnc.conflict = opts
	return &BlockNumberUpsertOne{
		create: bnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockNumber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bnc *BlockNumberCreate) OnConflictColumns(columns ...string) *BlockNumberUpsertOne {
	bnc.conflict = append(bnc.conflict, sql.ConflictColumns(columns...))
	return &BlockNumberUpsertOne{
		create: bnc,
	}
}

type (
	// BlockNumberUpsertOne is the builder for "upsert"-ing
	//  one BlockNumber node.
	BlockNumberUpsertOne struct {
		create *BlockNumberCreate
	}

	// BlockNumberUpsert is the "OnConflict" setter.
	BlockNumberUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *BlockNumberUpsert) SetCreatedAt(v uint32) *BlockNumberUpsert {
	u.Set(blocknumber.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateCreatedAt() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BlockNumberUpsert) AddCreatedAt(v uint32) *BlockNumberUpsert {
	u.Add(blocknumber.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockNumberUpsert) SetUpdatedAt(v uint32) *BlockNumberUpsert {
	u.Set(blocknumber.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateUpdatedAt() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlockNumberUpsert) AddUpdatedAt(v uint32) *BlockNumberUpsert {
	u.Add(blocknumber.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlockNumberUpsert) SetDeletedAt(v uint32) *BlockNumberUpsert {
	u.Set(blocknumber.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateDeletedAt() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlockNumberUpsert) AddDeletedAt(v uint32) *BlockNumberUpsert {
	u.Add(blocknumber.FieldDeletedAt, v)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *BlockNumberUpsert) SetChainType(v string) *BlockNumberUpsert {
	u.Set(blocknumber.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateChainType() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *BlockNumberUpsert) SetChainID(v int32) *BlockNumberUpsert {
	u.Set(blocknumber.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateChainID() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldChainID)
	return u
}

// AddChainID adds v to the "chain_id" field.
func (u *BlockNumberUpsert) AddChainID(v int32) *BlockNumberUpsert {
	u.Add(blocknumber.FieldChainID, v)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *BlockNumberUpsert) SetIdentifier(v string) *BlockNumberUpsert {
	u.Set(blocknumber.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateIdentifier() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldIdentifier)
	return u
}

// SetCurrentNum sets the "current_num" field.
func (u *BlockNumberUpsert) SetCurrentNum(v uint64) *BlockNumberUpsert {
	u.Set(blocknumber.FieldCurrentNum, v)
	return u
}

// UpdateCurrentNum sets the "current_num" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateCurrentNum() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldCurrentNum)
	return u
}

// AddCurrentNum adds v to the "current_num" field.
func (u *BlockNumberUpsert) AddCurrentNum(v uint64) *BlockNumberUpsert {
	u.Add(blocknumber.FieldCurrentNum, v)
	return u
}

// SetTopic sets the "topic" field.
func (u *BlockNumberUpsert) SetTopic(v string) *BlockNumberUpsert {
	u.Set(blocknumber.FieldTopic, v)
	return u
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateTopic() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldTopic)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockNumberUpsert) SetDescription(v string) *BlockNumberUpsert {
	u.Set(blocknumber.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockNumberUpsert) UpdateDescription() *BlockNumberUpsert {
	u.SetExcluded(blocknumber.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockNumberUpsert) ClearDescription() *BlockNumberUpsert {
	u.SetNull(blocknumber.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlockNumber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blocknumber.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *BlockNumberUpsertOne) UpdateNewValues() *BlockNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blocknumber.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.BlockNumber.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *BlockNumberUpsertOne) Ignore() *BlockNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockNumberUpsertOne) DoNothing() *BlockNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockNumberCreate.OnConflict
// documentation for more info.
func (u *BlockNumberUpsertOne) Update(set func(*BlockNumberUpsert)) *BlockNumberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockNumberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BlockNumberUpsertOne) SetCreatedAt(v uint32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BlockNumberUpsertOne) AddCreatedAt(v uint32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateCreatedAt() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockNumberUpsertOne) SetUpdatedAt(v uint32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlockNumberUpsertOne) AddUpdatedAt(v uint32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateUpdatedAt() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlockNumberUpsertOne) SetDeletedAt(v uint32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlockNumberUpsertOne) AddDeletedAt(v uint32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateDeletedAt() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *BlockNumberUpsertOne) SetChainType(v string) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateChainType() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *BlockNumberUpsertOne) SetChainID(v int32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetChainID(v)
	})
}

// AddChainID adds v to the "chain_id" field.
func (u *BlockNumberUpsertOne) AddChainID(v int32) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateChainID() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateChainID()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *BlockNumberUpsertOne) SetIdentifier(v string) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateIdentifier() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateIdentifier()
	})
}

// SetCurrentNum sets the "current_num" field.
func (u *BlockNumberUpsertOne) SetCurrentNum(v uint64) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetCurrentNum(v)
	})
}

// AddCurrentNum adds v to the "current_num" field.
func (u *BlockNumberUpsertOne) AddCurrentNum(v uint64) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddCurrentNum(v)
	})
}

// UpdateCurrentNum sets the "current_num" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateCurrentNum() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateCurrentNum()
	})
}

// SetTopic sets the "topic" field.
func (u *BlockNumberUpsertOne) SetTopic(v string) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateTopic() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateTopic()
	})
}

// SetDescription sets the "description" field.
func (u *BlockNumberUpsertOne) SetDescription(v string) *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockNumberUpsertOne) UpdateDescription() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockNumberUpsertOne) ClearDescription() *BlockNumberUpsertOne {
	return u.Update(func(s *BlockNumberUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *BlockNumberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockNumberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockNumberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockNumberUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BlockNumberUpsertOne.ID is not supported by MySQL driver. Use BlockNumberUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockNumberUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockNumberCreateBulk is the builder for creating many BlockNumber entities in bulk.
type BlockNumberCreateBulk struct {
	config
	builders []*BlockNumberCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockNumber entities in the database.
func (bncb *BlockNumberCreateBulk) Save(ctx context.Context) ([]*BlockNumber, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bncb.builders))
	nodes := make([]*BlockNumber, len(bncb.builders))
	mutators := make([]Mutator, len(bncb.builders))
	for i := range bncb.builders {
		func(i int, root context.Context) {
			builder := bncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockNumberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bncb *BlockNumberCreateBulk) SaveX(ctx context.Context) []*BlockNumber {
	v, err := bncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bncb *BlockNumberCreateBulk) Exec(ctx context.Context) error {
	_, err := bncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bncb *BlockNumberCreateBulk) ExecX(ctx context.Context) {
	if err := bncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockNumber.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockNumberUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (bncb *BlockNumberCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockNumberUpsertBulk {
	bncb.conflict = opts
	return &BlockNumberUpsertBulk{
		create: bncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockNumber.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bncb *BlockNumberCreateBulk) OnConflictColumns(columns ...string) *BlockNumberUpsertBulk {
	bncb.conflict = append(bncb.conflict, sql.ConflictColumns(columns...))
	return &BlockNumberUpsertBulk{
		create: bncb,
	}
}

// BlockNumberUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockNumber nodes.
type BlockNumberUpsertBulk struct {
	create *BlockNumberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockNumber.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blocknumber.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *BlockNumberUpsertBulk) UpdateNewValues() *BlockNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blocknumber.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockNumber.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *BlockNumberUpsertBulk) Ignore() *BlockNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockNumberUpsertBulk) DoNothing() *BlockNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockNumberCreateBulk.OnConflict
// documentation for more info.
func (u *BlockNumberUpsertBulk) Update(set func(*BlockNumberUpsert)) *BlockNumberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockNumberUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BlockNumberUpsertBulk) SetCreatedAt(v uint32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BlockNumberUpsertBulk) AddCreatedAt(v uint32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateCreatedAt() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockNumberUpsertBulk) SetUpdatedAt(v uint32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlockNumberUpsertBulk) AddUpdatedAt(v uint32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateUpdatedAt() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlockNumberUpsertBulk) SetDeletedAt(v uint32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlockNumberUpsertBulk) AddDeletedAt(v uint32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateDeletedAt() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *BlockNumberUpsertBulk) SetChainType(v string) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateChainType() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *BlockNumberUpsertBulk) SetChainID(v int32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetChainID(v)
	})
}

// AddChainID adds v to the "chain_id" field.
func (u *BlockNumberUpsertBulk) AddChainID(v int32) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateChainID() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateChainID()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *BlockNumberUpsertBulk) SetIdentifier(v string) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateIdentifier() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateIdentifier()
	})
}

// SetCurrentNum sets the "current_num" field.
func (u *BlockNumberUpsertBulk) SetCurrentNum(v uint64) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetCurrentNum(v)
	})
}

// AddCurrentNum adds v to the "current_num" field.
func (u *BlockNumberUpsertBulk) AddCurrentNum(v uint64) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.AddCurrentNum(v)
	})
}

// UpdateCurrentNum sets the "current_num" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateCurrentNum() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateCurrentNum()
	})
}

// SetTopic sets the "topic" field.
func (u *BlockNumberUpsertBulk) SetTopic(v string) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateTopic() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateTopic()
	})
}

// SetDescription sets the "description" field.
func (u *BlockNumberUpsertBulk) SetDescription(v string) *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockNumberUpsertBulk) UpdateDescription() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockNumberUpsertBulk) ClearDescription() *BlockNumberUpsertBulk {
	return u.Update(func(s *BlockNumberUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *BlockNumberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockNumberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockNumberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockNumberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
